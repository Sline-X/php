memcached: MongoDB, Redis, HBase, Riak, CouchDB,
Cassandra

однопоточный сервер для хранения данных в опера-
тивной памяти. За счет того, что процессору не приходится при большом количестве
соединений переключаться между потоками, достигается огромная производитель-
ность.

Причем Redis — это не просто хранилище пар «ключ-значение»: значения могут быть
как обычными строками, так и коллекциями (массивами, хешами, множествами), над
которыми можно осуществлять операции

Redis допускает сохранение данных на жесткий диск — тем самым разрешается про-
блема холодного старта, когда после запуска группировки серверов должно пройти
некоторое время, прежде чем заполнится кеш, и страницы будут отдаваться клиенту
быстро. Ключам можно назначать время жизни — это дает возможность очищать ста-
рые данные в фоновом режиме.

redis поддерживает транзакции
есть механизм репликации

механизм подписки pub/sub позволяет строить очереди заданий

конфиг располагается по пути /etc/redis/redis.conf
Также в ней располагается файл 6379.conf который используется по умолчанию для запуска сервера на порту 6379

sudo service redis-server start

redis-cli
PING
INFO

redis-cli -h localhost -p 6379

QUIT
EXIT
HELP PING -
1 поле указывает название команды и список возможных её параметров
поле summary кратко описывает назначение команды
поле since - версию Redis, с которой команда доступна
поле group - указывает группу, к которой относится команда

вызвав группу через @ можно получить список всех команд, входящих в группу
HELP @connection

@generic - команды общего назначения
@string - команды для работы со строками
@list - команды для работы со списками
@set - команды для работы с множествами
@sorted_set - команды для работы с сортированными множествами
@hash - оманды для работы с хешами
@pubsub - команды для организации подписчиков
@transactions - команды транзакционного механизма
@connection - команды управления соединением с сервером
@server - команды управления сервером
@scripting - втоматизация обработки данных
@hyperloglog - команды для работы с вероятностным алгритмом подсчета уникальных элементов
@cluster - команды для обслуживания кластера redis-серверов
@geo - команды для работы с гео-координатами
@stream - команды для обслуживания потоковых структур. Чаще всего это журнальные потоки данных

SET key "Hello, world!"
GET key

MSET позволяет вставить за один раз несколько значений, при этом ключи и значения отделяются друг от друга пробелом
MSET fst 1 snd 2 thd 3 fth 4

MGET позволяет извлекать сразу несколько значений
MGET fst snd thd fth
1) "1"
2) "2"
3) "3"
4) "4"

Обновление и удаление значений:
Команда SET

> SET "key" "old"
OK
> GET key
"old"
> SET "key" "new"
OK
> GET key
"new"

С помощью команды APPEND можно добавить в конец сущствующегой строки новое значение
> SET key "hello"
OK
>APPEND key ", world!"
(integer) 12
> GET key
"hello, world!"

При помощи команды INCR можно увеличить целочисленное значение на единицу, а посредством INCRBY - на произвольное целое значение:
> SET count 0
OK
> INCR count
(integer) 1
> GET count
"1"
> INCRBY count 5
(integer) 6
> GET count
"6"
> INCRBY count -3
(integer) 3
> GET count
"3"

Команде INCRBY можно передавать отрицательное значение, в этом случае будет осуществляться вычитание.
Для вычитание существуют специальные команды DECR и DECRBY:
> SET count 10
OK
> DECR count
(integer) 9
> GET count
"9"
> DECRBY count 5
(integer) 4
> GET count
"4"

Специальная команда INCRBYFLOAT позволяет прибавлять и удалять числа с плавающей точкой:
> GET count
"4"
> INCRBYFLOAT count 0.5
"4.5"
> GET count
"4.5"
> INCRBYFLOAT count -1.3
"3.2"

Для удаления пары "ключ-значение" предназначена команда DEL, которая принимает в качестве параметра ключ удаляемой пары:
> SET key value
OK
> GET key
"value"
> DEL key
(integer) 1
> GET key
(nil)

Управление ключами
Команда получения списка ключей - KEYS, которая в качесте единственного аргумента принимает шаблон поиска.
Если в качестве шаблона указать звёздочку *, будет позвращен список всех доступных ключей:
> KEYS *
1) "fst"
2) "fth"
3) "count"
4) "thd"
5) "snd"

Звездочку можно использовать в составе и более сложных шаблонов
> KEYS f*
1) "fst"
2) "fth"

Для переименвоания ключа предназначена команда RENAME, которая принимает в качестве первого аргумента названия ключа переименовываемой пары,
а в качестве второго - новое имя, которое ему назначается.
> SET fst hello
OK
> GET fst
"hello"
> RENAME fst snd
OK
> GET snd
"hello"
> GET fst
(nil)

Время жизни ключа.
ОДна из основных специализаций Redis - быстрый кеш, расположенный в оперативной памяти.
Для задания срока хранения ключей предназначена команда EXPIRE, в качестве первого параметра которой передается имя ключа, а в качестве второго - время его жизни в секундах.
Есл срок жизни ключа не истек, то команда XPIRE озвращает зрначение 1, в противном случае возвращается 0.
> SET timer "one minute"
OK
> EXPIRE timer 60
(integer) 1

Команда EXPIRE задает время жизни относительно текущего момента времени.
А чтобы задать абсолютное время жизни, можно воспользоваться командой EXPIREAT, которая принимает время в формате UNIXSTAMP (количество секунд, прошедших с 1 января 1970 года).
Существует отдельная команда SETEX , которая позволяет задачать одновременно и значение ключа, и время его жизни:
> SETEX timer 60 "one minute"
OK

Чтобы выяснить, сколько секунд осталось до истечения срока жизни ключа, можно воспользоваться командой TTL:
> TTL timer
(integer) 41

Ограничение на срок хранения можно отменить, воспользовавшись командой PERSIST:
> PERSIST timer
(integer) 1
> TTL timer
(integer) -1

Типы данных
Redis поддерживает два типа данных: скалярные и коллекции. Среди скалярных типов данных различают:
* строки - последовательность символов, заключенных в кавычки
* числа - целые и с плавающей точкой, позволяющие прибавлять и вычитать значения
Помимо скалярных значений, строк и чисел, Redis поддерживает коллекционные типы данных, позволяющие хранить до 4 294 967 296 (232) элементов.

Различают следующие типы коллекций:
* список - команды начинаются с символа L или R в зависимости от того, с какой стороны списка применяется оператор (слева L или справа R);
* хеш - команды начинаются с символа H;
* множество - команды начинаются с символа S;
* отсортированное множество - команды начинаются с символа Z.
Вложение коллекций не допускается, т.е. коллекции не могут выступать в качестве элементов других коллекций

В любой момент можно узнать тип значения при помощи специальной команды TYPE:
> SET key "hello, world!"
OK
> TYPE key
string

Хеш
Хеши хранят пары "ключ-значение" - т.е., помимо ключа к самому хешу, каждый элемент, который входит в его состав, также снабжается своим ключом.
Для создания хеша можно воспользоваться командой HSET, которая принимает в качестве первого параметра ключ хеша, в качестве второго параметра - ключ пары, а в качестве третьего - значение.
> HSET admin login "root"
(integer) 1
> HSET admin pass "password"
(integer) 1
> HSET admin register_at "2022-09-01"
(integer) 1

Создать полученный хеш можно также с помощью одной команды - HMSET, которая позволяет задать сразу все пары "ключ-значение":
> HMSET admin login "root" pass "password" register_at "2022-09-01"
OK

Для чтения элементов хеша можно воспользоваться командой HGET:
> HGET admin login
"root"

А извлечь все содержимое хеша - командой HVALS:
> HVALS admin
1) "root"
2) "password"
3) "2022-09-01"

Проверить существоавние поля с заданным именем можно, выполнив команду HEXISTS:
> HEXISTS admin login
(integer) 1
> HEXISTS admin none
(integer) 0

Кроме того, в любой момент можно запросить все ключи хеша, выполнив команду HKEYS:
> HKEYS admin
1) "login"
2) "pass"
3) "register_at"

С помощью команды HGETALL можно извлечь все содержимое хеша, включая ключи и значения:
> HGETALL admin
1) "login"
2) "root"
3) "pass"
4) "password"
5) "register_at"
6) "2017-09-01"

Выяснить количество элементов в хеше можно, выполнив команду HLEN:
> HLEN admin
(integer) 3

Множество
Множеством называют неупорядоченную коллекцию уникальных элементов, дублирующие значения в которой отбрасываются автоматически.
Для вставки значений в множество можно воспользоваться командой SADD, перывй параметр которой обозначает имя коллекции, а второй - вставляемое значение:
> SADD week monday
(integer) 1
> SADD week tuesday
(integer) 1
> SADD week monday
(integer) 0

Команда SADD позволяет вставлять в коллекцию сразу несколько значений:
> SADD week wednesday thursday
(integer) 2

Сколько бы повторяющихся значений ни было вставлено в колелкцию week, содержать она будет только уникальные значения, в чем можно убедиться, воспользовавшись командой SMEMBERS:
> SMEMBERS week
1) "monday"
2) "wednesday"
3) "tuesday"
4) "thursday"

Выяснить количество элементов в множестве позволяет команда SCARD:
> SCARD week
(integer) 4

Для удаления элемента из коллекции предназначена команда SREM:
> SREM week monday
(integer) 1

Для извлечения (случайного) значения из множества можно выполнить команду SPOP:
> SPOP week
"tuesday"

Сильной стороной множеств является возможность поиска, объединения и пересечения нескольких множеств.
Доп коллекция workdays:
> SADD workdays monday tuesday wednesday thuesday friday
(integer) 5
> SMEMBERS workdays
1) "thuesday"
2) "monday"
3) "wednesday"
4) "tuesday"
5) "friday"

Для поиска общих электронных адресов коллекций week и workdays можно воспользоваться командой SINTER:
> SINTER week workdays
1) "wednesday"
2) "thursday"

Для поиска во множестве workdays дней, не входящих во множество week, можно выполнить команду SDIFF:
> SDIFF workdays week
1) "monday"
2) "tuesday"
3) "friday"

Выполнив команду SUNION, можно обхединить оба множества week и workdays в одно (дубликаты автоматически отбрасываются):
> SUNION week workdays
1) "thursday"
2) "monday"
3) "tuesday"
4) "friday"
5) "wednesday"

Команда SUNION не ограничена двумя множествами и позволяет объединить сразу несколько коллекций. Более того, воспользовавшись командой SUNIONSTORE, результирующее множество
можно сохранить в новой коллекции:
> SUNIONSTORE result week workdays
(integer) 5
> SMEMBERS result
1) "thursday"
2) "monday"
3) "tuesday"
4) "friday"
5) "wednesday"

Аналогичные команды существуют для пересечения SINTERSTORE и разности SDIFFSTORE.
Команда SMOVE перемещает элемент из одного множества в другое:
> SMOVE result new monday
(integer) 1
> SMOVE result new tuesday
(integer) 1
> SMEMBERS result
1) "friday"
2) "wednesday"
3) "thursday"
> SMEMBERS new
1) "monday"
2) "tuesday"


Отсортированное множество
Отсортированные множества в некотором смысле являются объединением всех остальных типов коллекций: списков, хешей и множеств. Точно так же как в хешах, этот тип
коллекции хранит пару "ключ-значение", только в качестве ключа выступает числовое значение, задающее порядок следования элементов, что роднит коллекцию со списком.
Как и традиционные множества, отсортированные множества сохраняют только уникальные значения. Команды, работающие с этим типом колелкций, начинаются с символа Z.
Команда ZADD позволяет добавить в коллекцию новые элементы. Название коллекции передается в качестве первого аргумента после которого следуют пары "ключ-значение" через пробел:
> ZADD words 200 hello 150 wet 100 world 50 base
(integer) 4

Получить содержимое отсортированного множества позволяет команда ZRANGE, которая принимает в качестве первого аргумента название коллекции,
в качестве второго - индекс элемента, с которого следует выводить значения (начинается с 0), а в качестве третьего - индекс элемента,
которым следует заканчивать вывод коллекции. Допускаются отрицательные значения, которые означают отсчет с конца коллекции:
> ZRANGE words 0 -1
1) "base"
2) "world"
3) "wet"
4) "hello"
> ZRANGE words 0 4
1) "base"
2) "world"
3) "wet"
4) "hello"
При этом порядок следования коллекции определяется числовым значением индекса.

Команда ZCARD зволяет выяснить размер коллекции:
> ZCARD words
(integer) 4

Команда ZCOUNT позволяет подсчитать количество элементов, расположенных в интервале числовых ключей.
Первый параметр команды требует назваия коллекции, второй - минимальное, третий - макимальное значение ключа.

> ZCOUNT words 100 150
(integer) 2
> ZINCRBY words -60 hello
"140"

Изменить значение ключа элементов можно, выполнив команду ZINCRBY:
> ZRANGE eords 0 -1
1) "base"
2) "world"
3) "hello"
4) "wet"

Команда ZRANK озволяет выяснить порядок следования элемента в коллекции:
> ZRANK words hello
(integer) 2

Команда ZREM удаляет элемент из коллекции:
> ZREM words hello
(integer) 1

Команда ZREMRANGEBYRANK удаляет все элементы коллекции, ориентируясь на индексы. Первый аргумент принимает название коллекции, второй - индекс, начиная с которого
следует осуществлять удаление, третий - индекс, которым заканчивается удаление (допускаются отрицательные значения). Команда ZREMRANGEBYSCORE аналогична ей, только
вместо порядкового индекса используются индексы, заданные при создании коллекции:
> ZREMRANGEBYRANK words 0 4
(integer) 3

Аналогично традиционным множествам отсортированное множество поддерживает команды ZINTERSTORE и ZUNIONSTORE, позволяющие сохранить пересечение и объединение двух множеств в отдельную коллекцию.


Базы данных
Базы данных в redis не имеют названия и пронумерованы. По умолчанию redis-cli открывает базу данных 0.
Для переключания следует воспользоваться командой SELECT:

> SET key value
OK
> GET key
"value"
> SELECT 1
OK
[1]> GET key
(nil)
[1]> SET key value1
OK
[1]> SELECT 0
OK
> GET key
"value"

Количество баз данных по умолчанию ограничено 16, но это значение можно поменять в конфигурационно файле сервера, извенив значение директивы databases.


Производительность Redis
Помимо redis-cli, в составе утилит установленного Redis есть утилита redis-benchmark, которая осуществляет измерение производительности ключевых команд на текущем сервере:
redis-benchmark -n 100000

Производительность сервера Redis может достигать 100 000 RPS (операций в секунду), даже на запись. Такие результаты достигаются за счет EventLoop-механизма, когда соединение
обрабатывает один поток в неблокирующем режиме.
Единичные экземпляры Redis способны обрабатывать запросы с десятка веб-серверов с PHP-приложениями
